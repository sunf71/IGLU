/******************************************************************/
/* igluFileParser.h                                               */
/* -----------------------                                        */
/*                                                                */
/* This class provides a cleanish parsing interface for various   */
/*   files, allowing easy tokenizing and reading of at least some */
/*   basic IGLU datatype classes directly.                        */
/*                                                                */
/* Chris Wyman (06/09/2010)                                       */
/******************************************************************/

#ifndef __IGLU_FILE_PARSER_H
#define __IGLU_FILE_PARSER_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "igluTextParsing.h"

namespace iglu {

class vec2;
class vec3;
class vec4;

class IGLUFileParser {
public:
	IGLUFileParser( char *filename, bool verbose=true );
	virtual ~IGLUFileParser();

	// Read the next line in the file into an internal buffer.  Discarding blanks
	//    throws ignores blank lines or those containing only comments (starting with '#')
	//    and returns the next line with actual stuff on it.
	// Returns a pointer to the start of the first non-blank character.
	char *ReadNextLine( bool discardBlanks=true );

	// Get access to either the last line read or the unprocessed part of the line
	char *GetCurrentLinePointer( void )						{ return internalBufPtr; }
	char *GetUnprocessedLinePointer( void )					{ return internalBuf; }

	// Gets the next token on the line. The token is read into the token parameter,
	//    and a pointer to the remainder of the line is returned.  The Upper and Lower
	//    versions make sure all characters in the token are a consistant case
	char *GetToken( char *token );
	char *GetLowerCaseToken( char *token );
	char *GetUpperCaseToken( char *token );

	// Reads a number from the line.  Versions returning a (char *) return a pointer
	//    to the remainder of the current line and store the value in the parameter,
	//    the others return the value directly.
	int		 GetInteger( void );
	unsigned GetUnsigned( void );	
	float	 GetFloat( void );
	vec2	 GetVec2( void );
	vec3	 GetVec3( void );
	vec4	 GetVec4( void );
	double	 GetDouble( void );
	char *	 GetInteger( int *result );
	char *	 GetUnsigned( unsigned *result );
	char *	 GetFloat( float *result );
	char *	 GetDouble( double *result );

	// File line number accessor
	int GetLineNumber( void ) const                         { return lineNum; }

	// Accessors to the underlying file handle
	bool IsFileValid( void ) const							{ return f != NULL; }
	FILE *GetFileHandle( void ) const						{ return f; }

	// Get information about the scene file
	char *GetFileName( void )								{ return unqualifiedFileName; }
	char *GetQualifiedFileName( void )						{ return fileName; }

	// Print error messages to standard output.
	void WarningMessage( const char *msg );
	void ErrorMessage( const char *msg );

	// Error messages where the first (msg) parameter includes a %s that
	//    is replaced by the second parameter
	void WarningMessage( const char *msg, const char *paramStr );
	void ErrorMessage( const char *msg, const char *paramStr );

	// Sometimes a line from the file is processed but then we find out that we were
	//    not the correct code to process this line.  Before passing the parser off
	//    to someone else, we should "reset" the line so the other code can start
	//    processing from the beginning of the line.
	void ResetProcessingForCurrentLine( void );

	// A pointer to a IGLUFileParser could have type IGLUFileParser::Ptr
	typedef IGLUFileParser *Ptr;

protected:
	FILE *f;
	bool m_closed;
	int lineNum;
	char *fileName, *unqualifiedFileName;
	char internalBuf[ 1024 ], *internalBufPtr;

	// A simple call to fgets, storing data internally, and increment our line counter
	char *__ReadLine( void );

	// Derived classes may want to go ahead and close the file when they're ready
	void CloseFile( void );
};


// End namespace iglu
}

#endif


