/***************************************************************************/
/* igluDrawText.cpp                                                        */
/* -------------------                                                     */
/*                                                                         */
/* This code is part of the IGLU Drawing Utilities class, and it draws     */
/*     text onscreen using a bitmapped font in a fairly simplistic way     */
/*     in order to avoid using GLUT functionality that uses OpenGL 2.x     */
/*                                                                         */
/* Chris Wyman (01/10/2012)                                                */
/***************************************************************************/


#include "iglu.h"

using namespace iglu;

#define MAX_STRING_SIZE  192

namespace {  // anonymous namespace to hide globals inside this file

#include "igluBitmapFont1.h"

static char iglu_TextVS[] = {
	"#version 400\n"
	"uniform vec2 lowerLeft;\n"
	"uniform vec2 charDelta;\n"
	"uniform sampler2D fontTex;\n"
	"layout(location=0) in  vec2 vertex;\n"
	"layout(location=1) in  vec2 texCoord;\n"
	"out block { vec2 tmpTexCoord; vec2 fTexCoord; };\n"
	"void main( void ) {\n"
	"	gl_Position = vec4( (lowerLeft+vertex*charDelta ), 0.0f, 1.0f );\n"
	"	fTexCoord = texCoord;\n"
	"	tmpTexCoord = vec2( vertex.x, texCoord.y );\n"
	"}\n"
};

static char iglu_TextGS[] = {
	"#version 400\n"
	"#extension GL_EXT_geometry_shader4 : enable\n"
	"layout(triangles, invocations = 1) in;\n"
	"layout(triangle_strip, max_vertices = 3) out;\n"
	"uniform vec2 charDelta;\n"
	"uniform vec2 charSpacing;\n"
	"in block { vec2 tmpTexCoord; vec2 fTexCoord; } In[];\n"
	"out block { vec2 fTexCoord; } Out;\n"
	"void main( void ) {\n"
	"	 int charID = gl_PrimitiveIDIn / 2;\n"
	"	 Out.fTexCoord = In[0].fTexCoord;\n"
	"	 gl_Position = gl_PositionIn[0] + vec4( vec2(charID, 0)*charSpacing, 0, 0 );\n"
	"	 EmitVertex();\n"
	"	 Out.fTexCoord = In[1].fTexCoord;\n"
	"	 gl_Position = gl_PositionIn[1] + vec4( vec2(charID, 0)*charSpacing, 0, 0 );\n"
	"	 EmitVertex();\n"
	"	 Out.fTexCoord = In[2].fTexCoord;\n"
	"	 gl_Position = gl_PositionIn[2] + vec4( vec2(charID, 0)*charSpacing, 0, 0 );\n"
	"	 EmitVertex();\n"
	"};\n"
};

// This really needs some comments
static char iglu_TextVariableGS[] = {
	"#version 400\n"
	"#extension GL_EXT_geometry_shader4 : enable\n"
	"layout(triangles, invocations = 1) in;\n"
	"layout(triangle_strip, max_vertices = 3) out;\n"
	"uniform vec2 lowerLeft;\n"
	"uniform vec2 charDelta;\n"
	"uniform samplerBuffer perCharData;\n"
	"in block { vec2 tmpTexCoord; vec2 fTexCoord; } In[];\n"
	"out block { vec2 fTexCoord; } Out;\n"
	"void main( void ) {\n"
	"	 int charID = gl_PrimitiveIDIn / 2;\n"
	"    vec4 charInfo = texelFetch( perCharData, charID );\n"
	"    float leftCharPos = lowerLeft.x+charInfo.z*charDelta.x;\n"
	"    float curCharWidth = charInfo.y*charDelta.x;\n"
    "	 Out.fTexCoord = vec2( charInfo.w + In[0].tmpTexCoord.x*charInfo.x, In[0].fTexCoord.y );\n"
	"	 gl_Position = vec4( leftCharPos+In[0].tmpTexCoord.x*curCharWidth, gl_PositionIn[0].y, 0.0f, 1.0f );\n"
	"	 EmitVertex();\n"
	"	 Out.fTexCoord = vec2( charInfo.w + In[1].tmpTexCoord.x*charInfo.x, In[1].fTexCoord.y );\n"
	"	 gl_Position = vec4( leftCharPos+In[1].tmpTexCoord.x*curCharWidth, gl_PositionIn[1].y, 0.0f, 1.0f );\n"
	"	 EmitVertex();\n"
	"	 Out.fTexCoord = vec2( charInfo.w + In[2].tmpTexCoord.x*charInfo.x, In[2].fTexCoord.y );\n"
	"	 gl_Position = vec4( leftCharPos+In[2].tmpTexCoord.x*curCharWidth, gl_PositionIn[2].y, 0.0f, 1.0f );\n"
	"	 EmitVertex();\n"
	"};\n"
};

static char iglu_TextFS[] = {
	"#version 400\n"
	"uniform vec4 textColor;\n"
	"uniform sampler2D fontTex;\n"
	"in block { vec2 fTexCoord; };\n"
	"out vec4 result;\n"
	"void main( void ) {\n"
	"	vec4 texColor = texture( fontTex, fTexCoord );\n"
	"	result = textColor*vec4( texColor.rrr, texColor.g );\n"
	"}\n"
};

static float iglu_QuadData[] = { 0, 0,   1, 0,   0, 1,   1, 1  };

static float iglu_CharQuadData[] = {
	0.0000, 0.0625, 0.00, 0.00,	// For character 0
	0.0625, 0.0625, 1.00, 0.00,
	0.0000, 0.0000, 0.00, 1.00,
	0.0625, 0.0000, 1.00, 1.00,
	0.0625, 0.0625, 0.00, 0.00,	// For character 1
	0.1250, 0.0625, 1.00, 0.00,
	0.0625, 0.0000, 0.00, 1.00,
	0.1250, 0.0000, 1.00, 1.00,
	0.1250, 0.0625, 0.00, 0.00,	// For character 2
	0.1875, 0.0625, 1.00, 0.00,
	0.1250, 0.0000, 0.00, 1.00,
	0.1875, 0.0000, 1.00, 1.00,
	0.1875, 0.0625, 0.00, 0.00,	// For character 3
	0.2500, 0.0625, 1.00, 0.00,
	0.1875, 0.0000, 0.00, 1.00,
	0.2500, 0.0000, 1.00, 1.00,
	0.2500, 0.0625, 0.00, 0.00,	// For character 4
	0.3125, 0.0625, 1.00, 0.00,
	0.2500, 0.0000, 0.00, 1.00,
	0.3125, 0.0000, 1.00, 1.00,
	0.3125, 0.0625, 0.00, 0.00,	// For character 5
	0.3750, 0.0625, 1.00, 0.00,
	0.3125, 0.0000, 0.00, 1.00,
	0.3750, 0.0000, 1.00, 1.00,
	0.3750, 0.0625, 0.00, 0.00,	// For character 6
	0.4375, 0.0625, 1.00, 0.00,
	0.3750, 0.0000, 0.00, 1.00,
	0.4375, 0.0000, 1.00, 1.00,
	0.4375, 0.0625, 0.00, 0.00,	// For character 7
	0.5000, 0.0625, 1.00, 0.00,
	0.4375, 0.0000, 0.00, 1.00,
	0.5000, 0.0000, 1.00, 1.00,
	0.5000, 0.0625, 0.00, 0.00,	// For character 8
	0.5625, 0.0625, 1.00, 0.00,
	0.5000, 0.0000, 0.00, 1.00,
	0.5625, 0.0000, 1.00, 1.00,
	0.5625, 0.0625, 0.00, 0.00,	// For character 9
	0.6250, 0.0625, 1.00, 0.00,
	0.5625, 0.0000, 0.00, 1.00,
	0.6250, 0.0000, 1.00, 1.00,
	0.6250, 0.0625, 0.00, 0.00,	// For character 10
	0.6875, 0.0625, 1.00, 0.00,
	0.6250, 0.0000, 0.00, 1.00,
	0.6875, 0.0000, 1.00, 1.00,
	0.6875, 0.0625, 0.00, 0.00,	// For character 11
	0.7500, 0.0625, 1.00, 0.00,
	0.6875, 0.0000, 0.00, 1.00,
	0.7500, 0.0000, 1.00, 1.00,
	0.7500, 0.0625, 0.00, 0.00,	// For character 12
	0.8125, 0.0625, 1.00, 0.00,
	0.7500, 0.0000, 0.00, 1.00,
	0.8125, 0.0000, 1.00, 1.00,
	0.8125, 0.0625, 0.00, 0.00,	// For character 13
	0.8750, 0.0625, 1.00, 0.00,
	0.8125, 0.0000, 0.00, 1.00,
	0.8750, 0.0000, 1.00, 1.00,
	0.8750, 0.0625, 0.00, 0.00,	// For character 14
	0.9375, 0.0625, 1.00, 0.00,
	0.8750, 0.0000, 0.00, 1.00,
	0.9375, 0.0000, 1.00, 1.00,
	0.9375, 0.0625, 0.00, 0.00,	// For character 15
	1.0000, 0.0625, 1.00, 0.00,
	0.9375, 0.0000, 0.00, 1.00,
	1.0000, 0.0000, 1.00, 1.00,
	0.0000, 0.1250, 0.00, 0.00,	// For character 16
	0.0625, 0.1250, 1.00, 0.00,
	0.0000, 0.0625, 0.00, 1.00,
	0.0625, 0.0625, 1.00, 1.00,
	0.0625, 0.1250, 0.00, 0.00,	// For character 17
	0.1250, 0.1250, 1.00, 0.00,
	0.0625, 0.0625, 0.00, 1.00,
	0.1250, 0.0625, 1.00, 1.00,
	0.1250, 0.1250, 0.00, 0.00,	// For character 18
	0.1875, 0.1250, 1.00, 0.00,
	0.1250, 0.0625, 0.00, 1.00,
	0.1875, 0.0625, 1.00, 1.00,
	0.1875, 0.1250, 0.00, 0.00,	// For character 19
	0.2500, 0.1250, 1.00, 0.00,
	0.1875, 0.0625, 0.00, 1.00,
	0.2500, 0.0625, 1.00, 1.00,
	0.2500, 0.1250, 0.00, 0.00,	// For character 20
	0.3125, 0.1250, 1.00, 0.00,
	0.2500, 0.0625, 0.00, 1.00,
	0.3125, 0.0625, 1.00, 1.00,
	0.3125, 0.1250, 0.00, 0.00,	// For character 21
	0.3750, 0.1250, 1.00, 0.00,
	0.3125, 0.0625, 0.00, 1.00,
	0.3750, 0.0625, 1.00, 1.00,
	0.3750, 0.1250, 0.00, 0.00,	// For character 22
	0.4375, 0.1250, 1.00, 0.00,
	0.3750, 0.0625, 0.00, 1.00,
	0.4375, 0.0625, 1.00, 1.00,
	0.4375, 0.1250, 0.00, 0.00,	// For character 23
	0.5000, 0.1250, 1.00, 0.00,
	0.4375, 0.0625, 0.00, 1.00,
	0.5000, 0.0625, 1.00, 1.00,
	0.5000, 0.1250, 0.00, 0.00,	// For character 24
	0.5625, 0.1250, 1.00, 0.00,
	0.5000, 0.0625, 0.00, 1.00,
	0.5625, 0.0625, 1.00, 1.00,
	0.5625, 0.1250, 0.00, 0.00,	// For character 25
	0.6250, 0.1250, 1.00, 0.00,
	0.5625, 0.0625, 0.00, 1.00,
	0.6250, 0.0625, 1.00, 1.00,
	0.6250, 0.1250, 0.00, 0.00,	// For character 26
	0.6875, 0.1250, 1.00, 0.00,
	0.6250, 0.0625, 0.00, 1.00,
	0.6875, 0.0625, 1.00, 1.00,
	0.6875, 0.1250, 0.00, 0.00,	// For character 27
	0.7500, 0.1250, 1.00, 0.00,
	0.6875, 0.0625, 0.00, 1.00,
	0.7500, 0.0625, 1.00, 1.00,
	0.7500, 0.1250, 0.00, 0.00,	// For character 28
	0.8125, 0.1250, 1.00, 0.00,
	0.7500, 0.0625, 0.00, 1.00,
	0.8125, 0.0625, 1.00, 1.00,
	0.8125, 0.1250, 0.00, 0.00,	// For character 29
	0.8750, 0.1250, 1.00, 0.00,
	0.8125, 0.0625, 0.00, 1.00,
	0.8750, 0.0625, 1.00, 1.00,
	0.8750, 0.1250, 0.00, 0.00,	// For character 30
	0.9375, 0.1250, 1.00, 0.00,
	0.8750, 0.0625, 0.00, 1.00,
	0.9375, 0.0625, 1.00, 1.00,
	0.9375, 0.1250, 0.00, 0.00,	// For character 31
	1.0000, 0.1250, 1.00, 0.00,
	0.9375, 0.0625, 0.00, 1.00,
	1.0000, 0.0625, 1.00, 1.00,
	0.0000, 0.1875, 0.00, 0.00,	// For character 32
	0.0625, 0.1875, 1.00, 0.00,
	0.0000, 0.1250, 0.00, 1.00,
	0.0625, 0.1250, 1.00, 1.00,
	0.0625, 0.1875, 0.00, 0.00,	// For character 33
	0.1250, 0.1875, 1.00, 0.00,
	0.0625, 0.1250, 0.00, 1.00,
	0.1250, 0.1250, 1.00, 1.00,
	0.1250, 0.1875, 0.00, 0.00,	// For character 34
	0.1875, 0.1875, 1.00, 0.00,
	0.1250, 0.1250, 0.00, 1.00,
	0.1875, 0.1250, 1.00, 1.00,
	0.1875, 0.1875, 0.00, 0.00,	// For character 35
	0.2500, 0.1875, 1.00, 0.00,
	0.1875, 0.1250, 0.00, 1.00,
	0.2500, 0.1250, 1.00, 1.00,
	0.2500, 0.1875, 0.00, 0.00,	// For character 36
	0.3125, 0.1875, 1.00, 0.00,
	0.2500, 0.1250, 0.00, 1.00,
	0.3125, 0.1250, 1.00, 1.00,
	0.3125, 0.1875, 0.00, 0.00,	// For character 37
	0.3750, 0.1875, 1.00, 0.00,
	0.3125, 0.1250, 0.00, 1.00,
	0.3750, 0.1250, 1.00, 1.00,
	0.3750, 0.1875, 0.00, 0.00,	// For character 38
	0.4375, 0.1875, 1.00, 0.00,
	0.3750, 0.1250, 0.00, 1.00,
	0.4375, 0.1250, 1.00, 1.00,
	0.4375, 0.1875, 0.00, 0.00,	// For character 39
	0.5000, 0.1875, 1.00, 0.00,
	0.4375, 0.1250, 0.00, 1.00,
	0.5000, 0.1250, 1.00, 1.00,
	0.5000, 0.1875, 0.00, 0.00,	// For character 40
	0.5625, 0.1875, 1.00, 0.00,
	0.5000, 0.1250, 0.00, 1.00,
	0.5625, 0.1250, 1.00, 1.00,
	0.5625, 0.1875, 0.00, 0.00,	// For character 41
	0.6250, 0.1875, 1.00, 0.00,
	0.5625, 0.1250, 0.00, 1.00,
	0.6250, 0.1250, 1.00, 1.00,
	0.6250, 0.1875, 0.00, 0.00,	// For character 42
	0.6875, 0.1875, 1.00, 0.00,
	0.6250, 0.1250, 0.00, 1.00,
	0.6875, 0.1250, 1.00, 1.00,
	0.6875, 0.1875, 0.00, 0.00,	// For character 43
	0.7500, 0.1875, 1.00, 0.00,
	0.6875, 0.1250, 0.00, 1.00,
	0.7500, 0.1250, 1.00, 1.00,
	0.7500, 0.1875, 0.00, 0.00,	// For character 44
	0.8125, 0.1875, 1.00, 0.00,
	0.7500, 0.1250, 0.00, 1.00,
	0.8125, 0.1250, 1.00, 1.00,
	0.8125, 0.1875, 0.00, 0.00,	// For character 45
	0.8750, 0.1875, 1.00, 0.00,
	0.8125, 0.1250, 0.00, 1.00,
	0.8750, 0.1250, 1.00, 1.00,
	0.8750, 0.1875, 0.00, 0.00,	// For character 46
	0.9375, 0.1875, 1.00, 0.00,
	0.8750, 0.1250, 0.00, 1.00,
	0.9375, 0.1250, 1.00, 1.00,
	0.9375, 0.1875, 0.00, 0.00,	// For character 47
	1.0000, 0.1875, 1.00, 0.00,
	0.9375, 0.1250, 0.00, 1.00,
	1.0000, 0.1250, 1.00, 1.00,
	0.0000, 0.2500, 0.00, 0.00,	// For character 48
	0.0625, 0.2500, 1.00, 0.00,
	0.0000, 0.1875, 0.00, 1.00,
	0.0625, 0.1875, 1.00, 1.00,
	0.0625, 0.2500, 0.00, 0.00,	// For character 49
	0.1250, 0.2500, 1.00, 0.00,
	0.0625, 0.1875, 0.00, 1.00,
	0.1250, 0.1875, 1.00, 1.00,
	0.1250, 0.2500, 0.00, 0.00,	// For character 50
	0.1875, 0.2500, 1.00, 0.00,
	0.1250, 0.1875, 0.00, 1.00,
	0.1875, 0.1875, 1.00, 1.00,
	0.1875, 0.2500, 0.00, 0.00,	// For character 51
	0.2500, 0.2500, 1.00, 0.00,
	0.1875, 0.1875, 0.00, 1.00,
	0.2500, 0.1875, 1.00, 1.00,
	0.2500, 0.2500, 0.00, 0.00,	// For character 52
	0.3125, 0.2500, 1.00, 0.00,
	0.2500, 0.1875, 0.00, 1.00,
	0.3125, 0.1875, 1.00, 1.00,
	0.3125, 0.2500, 0.00, 0.00,	// For character 53
	0.3750, 0.2500, 1.00, 0.00,
	0.3125, 0.1875, 0.00, 1.00,
	0.3750, 0.1875, 1.00, 1.00,
	0.3750, 0.2500, 0.00, 0.00,	// For character 54
	0.4375, 0.2500, 1.00, 0.00,
	0.3750, 0.1875, 0.00, 1.00,
	0.4375, 0.1875, 1.00, 1.00,
	0.4375, 0.2500, 0.00, 0.00,	// For character 55
	0.5000, 0.2500, 1.00, 0.00,
	0.4375, 0.1875, 0.00, 1.00,
	0.5000, 0.1875, 1.00, 1.00,
	0.5000, 0.2500, 0.00, 0.00,	// For character 56
	0.5625, 0.2500, 1.00, 0.00,
	0.5000, 0.1875, 0.00, 1.00,
	0.5625, 0.1875, 1.00, 1.00,
	0.5625, 0.2500, 0.00, 0.00,	// For character 57
	0.6250, 0.2500, 1.00, 0.00,
	0.5625, 0.1875, 0.00, 1.00,
	0.6250, 0.1875, 1.00, 1.00,
	0.6250, 0.2500, 0.00, 0.00,	// For character 58
	0.6875, 0.2500, 1.00, 0.00,
	0.6250, 0.1875, 0.00, 1.00,
	0.6875, 0.1875, 1.00, 1.00,
	0.6875, 0.2500, 0.00, 0.00,	// For character 59
	0.7500, 0.2500, 1.00, 0.00,
	0.6875, 0.1875, 0.00, 1.00,
	0.7500, 0.1875, 1.00, 1.00,
	0.7500, 0.2500, 0.00, 0.00,	// For character 60
	0.8125, 0.2500, 1.00, 0.00,
	0.7500, 0.1875, 0.00, 1.00,
	0.8125, 0.1875, 1.00, 1.00,
	0.8125, 0.2500, 0.00, 0.00,	// For character 61
	0.8750, 0.2500, 1.00, 0.00,
	0.8125, 0.1875, 0.00, 1.00,
	0.8750, 0.1875, 1.00, 1.00,
	0.8750, 0.2500, 0.00, 0.00,	// For character 62
	0.9375, 0.2500, 1.00, 0.00,
	0.8750, 0.1875, 0.00, 1.00,
	0.9375, 0.1875, 1.00, 1.00,
	0.9375, 0.2500, 0.00, 0.00,	// For character 63
	1.0000, 0.2500, 1.00, 0.00,
	0.9375, 0.1875, 0.00, 1.00,
	1.0000, 0.1875, 1.00, 1.00,
	0.0000, 0.3125, 0.00, 0.00,	// For character 64
	0.0625, 0.3125, 1.00, 0.00,
	0.0000, 0.2500, 0.00, 1.00,
	0.0625, 0.2500, 1.00, 1.00,
	0.0625, 0.3125, 0.00, 0.00,	// For character 65
	0.1250, 0.3125, 1.00, 0.00,
	0.0625, 0.2500, 0.00, 1.00,
	0.1250, 0.2500, 1.00, 1.00,
	0.1250, 0.3125, 0.00, 0.00,	// For character 66
	0.1875, 0.3125, 1.00, 0.00,
	0.1250, 0.2500, 0.00, 1.00,
	0.1875, 0.2500, 1.00, 1.00,
	0.1875, 0.3125, 0.00, 0.00,	// For character 67
	0.2500, 0.3125, 1.00, 0.00,
	0.1875, 0.2500, 0.00, 1.00,
	0.2500, 0.2500, 1.00, 1.00,
	0.2500, 0.3125, 0.00, 0.00,	// For character 68
	0.3125, 0.3125, 1.00, 0.00,
	0.2500, 0.2500, 0.00, 1.00,
	0.3125, 0.2500, 1.00, 1.00,
	0.3125, 0.3125, 0.00, 0.00,	// For character 69
	0.3750, 0.3125, 1.00, 0.00,
	0.3125, 0.2500, 0.00, 1.00,
	0.3750, 0.2500, 1.00, 1.00,
	0.3750, 0.3125, 0.00, 0.00,	// For character 70
	0.4375, 0.3125, 1.00, 0.00,
	0.3750, 0.2500, 0.00, 1.00,
	0.4375, 0.2500, 1.00, 1.00,
	0.4375, 0.3125, 0.00, 0.00,	// For character 71
	0.5000, 0.3125, 1.00, 0.00,
	0.4375, 0.2500, 0.00, 1.00,
	0.5000, 0.2500, 1.00, 1.00,
	0.5000, 0.3125, 0.00, 0.00,	// For character 72
	0.5625, 0.3125, 1.00, 0.00,
	0.5000, 0.2500, 0.00, 1.00,
	0.5625, 0.2500, 1.00, 1.00,
	0.5625, 0.3125, 0.00, 0.00,	// For character 73
	0.6250, 0.3125, 1.00, 0.00,
	0.5625, 0.2500, 0.00, 1.00,
	0.6250, 0.2500, 1.00, 1.00,
	0.6250, 0.3125, 0.00, 0.00,	// For character 74
	0.6875, 0.3125, 1.00, 0.00,
	0.6250, 0.2500, 0.00, 1.00,
	0.6875, 0.2500, 1.00, 1.00,
	0.6875, 0.3125, 0.00, 0.00,	// For character 75
	0.7500, 0.3125, 1.00, 0.00,
	0.6875, 0.2500, 0.00, 1.00,
	0.7500, 0.2500, 1.00, 1.00,
	0.7500, 0.3125, 0.00, 0.00,	// For character 76
	0.8125, 0.3125, 1.00, 0.00,
	0.7500, 0.2500, 0.00, 1.00,
	0.8125, 0.2500, 1.00, 1.00,
	0.8125, 0.3125, 0.00, 0.00,	// For character 77
	0.8750, 0.3125, 1.00, 0.00,
	0.8125, 0.2500, 0.00, 1.00,
	0.8750, 0.2500, 1.00, 1.00,
	0.8750, 0.3125, 0.00, 0.00,	// For character 78
	0.9375, 0.3125, 1.00, 0.00,
	0.8750, 0.2500, 0.00, 1.00,
	0.9375, 0.2500, 1.00, 1.00,
	0.9375, 0.3125, 0.00, 0.00,	// For character 79
	1.0000, 0.3125, 1.00, 0.00,
	0.9375, 0.2500, 0.00, 1.00,
	1.0000, 0.2500, 1.00, 1.00,
	0.0000, 0.3750, 0.00, 0.00,	// For character 80
	0.0625, 0.3750, 1.00, 0.00,
	0.0000, 0.3125, 0.00, 1.00,
	0.0625, 0.3125, 1.00, 1.00,
	0.0625, 0.3750, 0.00, 0.00,	// For character 81
	0.1250, 0.3750, 1.00, 0.00,
	0.0625, 0.3125, 0.00, 1.00,
	0.1250, 0.3125, 1.00, 1.00,
	0.1250, 0.3750, 0.00, 0.00,	// For character 82
	0.1875, 0.3750, 1.00, 0.00,
	0.1250, 0.3125, 0.00, 1.00,
	0.1875, 0.3125, 1.00, 1.00,
	0.1875, 0.3750, 0.00, 0.00,	// For character 83
	0.2500, 0.3750, 1.00, 0.00,
	0.1875, 0.3125, 0.00, 1.00,
	0.2500, 0.3125, 1.00, 1.00,
	0.2500, 0.3750, 0.00, 0.00,	// For character 84
	0.3125, 0.3750, 1.00, 0.00,
	0.2500, 0.3125, 0.00, 1.00,
	0.3125, 0.3125, 1.00, 1.00,
	0.3125, 0.3750, 0.00, 0.00,	// For character 85
	0.3750, 0.3750, 1.00, 0.00,
	0.3125, 0.3125, 0.00, 1.00,
	0.3750, 0.3125, 1.00, 1.00,
	0.3750, 0.3750, 0.00, 0.00,	// For character 86
	0.4375, 0.3750, 1.00, 0.00,
	0.3750, 0.3125, 0.00, 1.00,
	0.4375, 0.3125, 1.00, 1.00,
	0.4375, 0.3750, 0.00, 0.00,	// For character 87
	0.5000, 0.3750, 1.00, 0.00,
	0.4375, 0.3125, 0.00, 1.00,
	0.5000, 0.3125, 1.00, 1.00,
	0.5000, 0.3750, 0.00, 0.00,	// For character 88
	0.5625, 0.3750, 1.00, 0.00,
	0.5000, 0.3125, 0.00, 1.00,
	0.5625, 0.3125, 1.00, 1.00,
	0.5625, 0.3750, 0.00, 0.00,	// For character 89
	0.6250, 0.3750, 1.00, 0.00,
	0.5625, 0.3125, 0.00, 1.00,
	0.6250, 0.3125, 1.00, 1.00,
	0.6250, 0.3750, 0.00, 0.00,	// For character 90
	0.6875, 0.3750, 1.00, 0.00,
	0.6250, 0.3125, 0.00, 1.00,
	0.6875, 0.3125, 1.00, 1.00,
	0.6875, 0.3750, 0.00, 0.00,	// For character 91
	0.7500, 0.3750, 1.00, 0.00,
	0.6875, 0.3125, 0.00, 1.00,
	0.7500, 0.3125, 1.00, 1.00,
	0.7500, 0.3750, 0.00, 0.00,	// For character 92
	0.8125, 0.3750, 1.00, 0.00,
	0.7500, 0.3125, 0.00, 1.00,
	0.8125, 0.3125, 1.00, 1.00,
	0.8125, 0.3750, 0.00, 0.00,	// For character 93
	0.8750, 0.3750, 1.00, 0.00,
	0.8125, 0.3125, 0.00, 1.00,
	0.8750, 0.3125, 1.00, 1.00,
	0.8750, 0.3750, 0.00, 0.00,	// For character 94
	0.9375, 0.3750, 1.00, 0.00,
	0.8750, 0.3125, 0.00, 1.00,
	0.9375, 0.3125, 1.00, 1.00,
	0.9375, 0.3750, 0.00, 0.00,	// For character 95
	1.0000, 0.3750, 1.00, 0.00,
	0.9375, 0.3125, 0.00, 1.00,
	1.0000, 0.3125, 1.00, 1.00,
	0.0000, 0.4375, 0.00, 0.00,	// For character 96
	0.0625, 0.4375, 1.00, 0.00,
	0.0000, 0.3750, 0.00, 1.00,
	0.0625, 0.3750, 1.00, 1.00,
	0.0625, 0.4375, 0.00, 0.00,	// For character 97
	0.1250, 0.4375, 1.00, 0.00,
	0.0625, 0.3750, 0.00, 1.00,
	0.1250, 0.3750, 1.00, 1.00,
	0.1250, 0.4375, 0.00, 0.00,	// For character 98
	0.1875, 0.4375, 1.00, 0.00,
	0.1250, 0.3750, 0.00, 1.00,
	0.1875, 0.3750, 1.00, 1.00,
	0.1875, 0.4375, 0.00, 0.00,	// For character 99
	0.2500, 0.4375, 1.00, 0.00,
	0.1875, 0.3750, 0.00, 1.00,
	0.2500, 0.3750, 1.00, 1.00,
	0.2500, 0.4375, 0.00, 0.00,	// For character 100
	0.3125, 0.4375, 1.00, 0.00,
	0.2500, 0.3750, 0.00, 1.00,
	0.3125, 0.3750, 1.00, 1.00,
	0.3125, 0.4375, 0.00, 0.00,	// For character 101
	0.3750, 0.4375, 1.00, 0.00,
	0.3125, 0.3750, 0.00, 1.00,
	0.3750, 0.3750, 1.00, 1.00,
	0.3750, 0.4375, 0.00, 0.00,	// For character 102
	0.4375, 0.4375, 1.00, 0.00,
	0.3750, 0.3750, 0.00, 1.00,
	0.4375, 0.3750, 1.00, 1.00,
	0.4375, 0.4375, 0.00, 0.00,	// For character 103
	0.5000, 0.4375, 1.00, 0.00,
	0.4375, 0.3750, 0.00, 1.00,
	0.5000, 0.3750, 1.00, 1.00,
	0.5000, 0.4375, 0.00, 0.00,	// For character 104
	0.5625, 0.4375, 1.00, 0.00,
	0.5000, 0.3750, 0.00, 1.00,
	0.5625, 0.3750, 1.00, 1.00,
	0.5625, 0.4375, 0.00, 0.00,	// For character 105
	0.6250, 0.4375, 1.00, 0.00,
	0.5625, 0.3750, 0.00, 1.00,
	0.6250, 0.3750, 1.00, 1.00,
	0.6250, 0.4375, 0.00, 0.00,	// For character 106
	0.6875, 0.4375, 1.00, 0.00,
	0.6250, 0.3750, 0.00, 1.00,
	0.6875, 0.3750, 1.00, 1.00,
	0.6875, 0.4375, 0.00, 0.00,	// For character 107
	0.7500, 0.4375, 1.00, 0.00,
	0.6875, 0.3750, 0.00, 1.00,
	0.7500, 0.3750, 1.00, 1.00,
	0.7500, 0.4375, 0.00, 0.00,	// For character 108
	0.8125, 0.4375, 1.00, 0.00,
	0.7500, 0.3750, 0.00, 1.00,
	0.8125, 0.3750, 1.00, 1.00,
	0.8125, 0.4375, 0.00, 0.00,	// For character 109
	0.8750, 0.4375, 1.00, 0.00,
	0.8125, 0.3750, 0.00, 1.00,
	0.8750, 0.3750, 1.00, 1.00,
	0.8750, 0.4375, 0.00, 0.00,	// For character 110
	0.9375, 0.4375, 1.00, 0.00,
	0.8750, 0.3750, 0.00, 1.00,
	0.9375, 0.3750, 1.00, 1.00,
	0.9375, 0.4375, 0.00, 0.00,	// For character 111
	1.0000, 0.4375, 1.00, 0.00,
	0.9375, 0.3750, 0.00, 1.00,
	1.0000, 0.3750, 1.00, 1.00,
	0.0000, 0.5000, 0.00, 0.00,	// For character 112
	0.0625, 0.5000, 1.00, 0.00,
	0.0000, 0.4375, 0.00, 1.00,
	0.0625, 0.4375, 1.00, 1.00,
	0.0625, 0.5000, 0.00, 0.00,	// For character 113
	0.1250, 0.5000, 1.00, 0.00,
	0.0625, 0.4375, 0.00, 1.00,
	0.1250, 0.4375, 1.00, 1.00,
	0.1250, 0.5000, 0.00, 0.00,	// For character 114
	0.1875, 0.5000, 1.00, 0.00,
	0.1250, 0.4375, 0.00, 1.00,
	0.1875, 0.4375, 1.00, 1.00,
	0.1875, 0.5000, 0.00, 0.00,	// For character 115
	0.2500, 0.5000, 1.00, 0.00,
	0.1875, 0.4375, 0.00, 1.00,
	0.2500, 0.4375, 1.00, 1.00,
	0.2500, 0.5000, 0.00, 0.00,	// For character 116
	0.3125, 0.5000, 1.00, 0.00,
	0.2500, 0.4375, 0.00, 1.00,
	0.3125, 0.4375, 1.00, 1.00,
	0.3125, 0.5000, 0.00, 0.00,	// For character 117
	0.3750, 0.5000, 1.00, 0.00,
	0.3125, 0.4375, 0.00, 1.00,
	0.3750, 0.4375, 1.00, 1.00,
	0.3750, 0.5000, 0.00, 0.00,	// For character 118
	0.4375, 0.5000, 1.00, 0.00,
	0.3750, 0.4375, 0.00, 1.00,
	0.4375, 0.4375, 1.00, 1.00,
	0.4375, 0.5000, 0.00, 0.00,	// For character 119
	0.5000, 0.5000, 1.00, 0.00,
	0.4375, 0.4375, 0.00, 1.00,
	0.5000, 0.4375, 1.00, 1.00,
	0.5000, 0.5000, 0.00, 0.00,	// For character 120
	0.5625, 0.5000, 1.00, 0.00,
	0.5000, 0.4375, 0.00, 1.00,
	0.5625, 0.4375, 1.00, 1.00,
	0.5625, 0.5000, 0.00, 0.00,	// For character 121
	0.6250, 0.5000, 1.00, 0.00,
	0.5625, 0.4375, 0.00, 1.00,
	0.6250, 0.4375, 1.00, 1.00,
	0.6250, 0.5000, 0.00, 0.00,	// For character 122
	0.6875, 0.5000, 1.00, 0.00,
	0.6250, 0.4375, 0.00, 1.00,
	0.6875, 0.4375, 1.00, 1.00,
	0.6875, 0.5000, 0.00, 0.00,	// For character 123
	0.7500, 0.5000, 1.00, 0.00,
	0.6875, 0.4375, 0.00, 1.00,
	0.7500, 0.4375, 1.00, 1.00,
	0.7500, 0.5000, 0.00, 0.00,	// For character 124
	0.8125, 0.5000, 1.00, 0.00,
	0.7500, 0.4375, 0.00, 1.00,
	0.8125, 0.4375, 1.00, 1.00,
	0.8125, 0.5000, 0.00, 0.00,	// For character 125
	0.8750, 0.5000, 1.00, 0.00,
	0.8125, 0.4375, 0.00, 1.00,
	0.8750, 0.4375, 1.00, 1.00,
	0.8750, 0.5000, 0.00, 0.00,	// For character 126
	0.9375, 0.5000, 1.00, 0.00,
	0.8750, 0.4375, 0.00, 1.00,
	0.9375, 0.4375, 1.00, 1.00,
	0.9375, 0.5000, 0.00, 0.00,	// For character 127
	1.0000, 0.5000, 1.00, 0.00,
	0.9375, 0.4375, 0.00, 1.00,
	1.0000, 0.4375, 1.00, 1.00,
	0.0000, 0.5625, 0.00, 0.00,	// For character 128
	0.0625, 0.5625, 1.00, 0.00,
	0.0000, 0.5000, 0.00, 1.00,
	0.0625, 0.5000, 1.00, 1.00,
	0.0625, 0.5625, 0.00, 0.00,	// For character 129
	0.1250, 0.5625, 1.00, 0.00,
	0.0625, 0.5000, 0.00, 1.00,
	0.1250, 0.5000, 1.00, 1.00,
	0.1250, 0.5625, 0.00, 0.00,	// For character 130
	0.1875, 0.5625, 1.00, 0.00,
	0.1250, 0.5000, 0.00, 1.00,
	0.1875, 0.5000, 1.00, 1.00,
	0.1875, 0.5625, 0.00, 0.00,	// For character 131
	0.2500, 0.5625, 1.00, 0.00,
	0.1875, 0.5000, 0.00, 1.00,
	0.2500, 0.5000, 1.00, 1.00,
	0.2500, 0.5625, 0.00, 0.00,	// For character 132
	0.3125, 0.5625, 1.00, 0.00,
	0.2500, 0.5000, 0.00, 1.00,
	0.3125, 0.5000, 1.00, 1.00,
	0.3125, 0.5625, 0.00, 0.00,	// For character 133
	0.3750, 0.5625, 1.00, 0.00,
	0.3125, 0.5000, 0.00, 1.00,
	0.3750, 0.5000, 1.00, 1.00,
	0.3750, 0.5625, 0.00, 0.00,	// For character 134
	0.4375, 0.5625, 1.00, 0.00,
	0.3750, 0.5000, 0.00, 1.00,
	0.4375, 0.5000, 1.00, 1.00,
	0.4375, 0.5625, 0.00, 0.00,	// For character 135
	0.5000, 0.5625, 1.00, 0.00,
	0.4375, 0.5000, 0.00, 1.00,
	0.5000, 0.5000, 1.00, 1.00,
	0.5000, 0.5625, 0.00, 0.00,	// For character 136
	0.5625, 0.5625, 1.00, 0.00,
	0.5000, 0.5000, 0.00, 1.00,
	0.5625, 0.5000, 1.00, 1.00,
	0.5625, 0.5625, 0.00, 0.00,	// For character 137
	0.6250, 0.5625, 1.00, 0.00,
	0.5625, 0.5000, 0.00, 1.00,
	0.6250, 0.5000, 1.00, 1.00,
	0.6250, 0.5625, 0.00, 0.00,	// For character 138
	0.6875, 0.5625, 1.00, 0.00,
	0.6250, 0.5000, 0.00, 1.00,
	0.6875, 0.5000, 1.00, 1.00,
	0.6875, 0.5625, 0.00, 0.00,	// For character 139
	0.7500, 0.5625, 1.00, 0.00,
	0.6875, 0.5000, 0.00, 1.00,
	0.7500, 0.5000, 1.00, 1.00,
	0.7500, 0.5625, 0.00, 0.00,	// For character 140
	0.8125, 0.5625, 1.00, 0.00,
	0.7500, 0.5000, 0.00, 1.00,
	0.8125, 0.5000, 1.00, 1.00,
	0.8125, 0.5625, 0.00, 0.00,	// For character 141
	0.8750, 0.5625, 1.00, 0.00,
	0.8125, 0.5000, 0.00, 1.00,
	0.8750, 0.5000, 1.00, 1.00,
	0.8750, 0.5625, 0.00, 0.00,	// For character 142
	0.9375, 0.5625, 1.00, 0.00,
	0.8750, 0.5000, 0.00, 1.00,
	0.9375, 0.5000, 1.00, 1.00,
	0.9375, 0.5625, 0.00, 0.00,	// For character 143
	1.0000, 0.5625, 1.00, 0.00,
	0.9375, 0.5000, 0.00, 1.00,
	1.0000, 0.5000, 1.00, 1.00,
	0.0000, 0.6250, 0.00, 0.00,	// For character 144
	0.0625, 0.6250, 1.00, 0.00,
	0.0000, 0.5625, 0.00, 1.00,
	0.0625, 0.5625, 1.00, 1.00,
	0.0625, 0.6250, 0.00, 0.00,	// For character 145
	0.1250, 0.6250, 1.00, 0.00,
	0.0625, 0.5625, 0.00, 1.00,
	0.1250, 0.5625, 1.00, 1.00,
	0.1250, 0.6250, 0.00, 0.00,	// For character 146
	0.1875, 0.6250, 1.00, 0.00,
	0.1250, 0.5625, 0.00, 1.00,
	0.1875, 0.5625, 1.00, 1.00,
	0.1875, 0.6250, 0.00, 0.00,	// For character 147
	0.2500, 0.6250, 1.00, 0.00,
	0.1875, 0.5625, 0.00, 1.00,
	0.2500, 0.5625, 1.00, 1.00,
	0.2500, 0.6250, 0.00, 0.00,	// For character 148
	0.3125, 0.6250, 1.00, 0.00,
	0.2500, 0.5625, 0.00, 1.00,
	0.3125, 0.5625, 1.00, 1.00,
	0.3125, 0.6250, 0.00, 0.00,	// For character 149
	0.3750, 0.6250, 1.00, 0.00,
	0.3125, 0.5625, 0.00, 1.00,
	0.3750, 0.5625, 1.00, 1.00,
	0.3750, 0.6250, 0.00, 0.00,	// For character 150
	0.4375, 0.6250, 1.00, 0.00,
	0.3750, 0.5625, 0.00, 1.00,
	0.4375, 0.5625, 1.00, 1.00,
	0.4375, 0.6250, 0.00, 0.00,	// For character 151
	0.5000, 0.6250, 1.00, 0.00,
	0.4375, 0.5625, 0.00, 1.00,
	0.5000, 0.5625, 1.00, 1.00,
	0.5000, 0.6250, 0.00, 0.00,	// For character 152
	0.5625, 0.6250, 1.00, 0.00,
	0.5000, 0.5625, 0.00, 1.00,
	0.5625, 0.5625, 1.00, 1.00,
	0.5625, 0.6250, 0.00, 0.00,	// For character 153
	0.6250, 0.6250, 1.00, 0.00,
	0.5625, 0.5625, 0.00, 1.00,
	0.6250, 0.5625, 1.00, 1.00,
	0.6250, 0.6250, 0.00, 0.00,	// For character 154
	0.6875, 0.6250, 1.00, 0.00,
	0.6250, 0.5625, 0.00, 1.00,
	0.6875, 0.5625, 1.00, 1.00,
	0.6875, 0.6250, 0.00, 0.00,	// For character 155
	0.7500, 0.6250, 1.00, 0.00,
	0.6875, 0.5625, 0.00, 1.00,
	0.7500, 0.5625, 1.00, 1.00,
	0.7500, 0.6250, 0.00, 0.00,	// For character 156
	0.8125, 0.6250, 1.00, 0.00,
	0.7500, 0.5625, 0.00, 1.00,
	0.8125, 0.5625, 1.00, 1.00,
	0.8125, 0.6250, 0.00, 0.00,	// For character 157
	0.8750, 0.6250, 1.00, 0.00,
	0.8125, 0.5625, 0.00, 1.00,
	0.8750, 0.5625, 1.00, 1.00,
	0.8750, 0.6250, 0.00, 0.00,	// For character 158
	0.9375, 0.6250, 1.00, 0.00,
	0.8750, 0.5625, 0.00, 1.00,
	0.9375, 0.5625, 1.00, 1.00,
	0.9375, 0.6250, 0.00, 0.00,	// For character 159
	1.0000, 0.6250, 1.00, 0.00,
	0.9375, 0.5625, 0.00, 1.00,
	1.0000, 0.5625, 1.00, 1.00,
	0.0000, 0.6875, 0.00, 0.00,	// For character 160
	0.0625, 0.6875, 1.00, 0.00,
	0.0000, 0.6250, 0.00, 1.00,
	0.0625, 0.6250, 1.00, 1.00,
	0.0625, 0.6875, 0.00, 0.00,	// For character 161
	0.1250, 0.6875, 1.00, 0.00,
	0.0625, 0.6250, 0.00, 1.00,
	0.1250, 0.6250, 1.00, 1.00,
	0.1250, 0.6875, 0.00, 0.00,	// For character 162
	0.1875, 0.6875, 1.00, 0.00,
	0.1250, 0.6250, 0.00, 1.00,
	0.1875, 0.6250, 1.00, 1.00,
	0.1875, 0.6875, 0.00, 0.00,	// For character 163
	0.2500, 0.6875, 1.00, 0.00,
	0.1875, 0.6250, 0.00, 1.00,
	0.2500, 0.6250, 1.00, 1.00,
	0.2500, 0.6875, 0.00, 0.00,	// For character 164
	0.3125, 0.6875, 1.00, 0.00,
	0.2500, 0.6250, 0.00, 1.00,
	0.3125, 0.6250, 1.00, 1.00,
	0.3125, 0.6875, 0.00, 0.00,	// For character 165
	0.3750, 0.6875, 1.00, 0.00,
	0.3125, 0.6250, 0.00, 1.00,
	0.3750, 0.6250, 1.00, 1.00,
	0.3750, 0.6875, 0.00, 0.00,	// For character 166
	0.4375, 0.6875, 1.00, 0.00,
	0.3750, 0.6250, 0.00, 1.00,
	0.4375, 0.6250, 1.00, 1.00,
	0.4375, 0.6875, 0.00, 0.00,	// For character 167
	0.5000, 0.6875, 1.00, 0.00,
	0.4375, 0.6250, 0.00, 1.00,
	0.5000, 0.6250, 1.00, 1.00,
	0.5000, 0.6875, 0.00, 0.00,	// For character 168
	0.5625, 0.6875, 1.00, 0.00,
	0.5000, 0.6250, 0.00, 1.00,
	0.5625, 0.6250, 1.00, 1.00,
	0.5625, 0.6875, 0.00, 0.00,	// For character 169
	0.6250, 0.6875, 1.00, 0.00,
	0.5625, 0.6250, 0.00, 1.00,
	0.6250, 0.6250, 1.00, 1.00,
	0.6250, 0.6875, 0.00, 0.00,	// For character 170
	0.6875, 0.6875, 1.00, 0.00,
	0.6250, 0.6250, 0.00, 1.00,
	0.6875, 0.6250, 1.00, 1.00,
	0.6875, 0.6875, 0.00, 0.00,	// For character 171
	0.7500, 0.6875, 1.00, 0.00,
	0.6875, 0.6250, 0.00, 1.00,
	0.7500, 0.6250, 1.00, 1.00,
	0.7500, 0.6875, 0.00, 0.00,	// For character 172
	0.8125, 0.6875, 1.00, 0.00,
	0.7500, 0.6250, 0.00, 1.00,
	0.8125, 0.6250, 1.00, 1.00,
	0.8125, 0.6875, 0.00, 0.00,	// For character 173
	0.8750, 0.6875, 1.00, 0.00,
	0.8125, 0.6250, 0.00, 1.00,
	0.8750, 0.6250, 1.00, 1.00,
	0.8750, 0.6875, 0.00, 0.00,	// For character 174
	0.9375, 0.6875, 1.00, 0.00,
	0.8750, 0.6250, 0.00, 1.00,
	0.9375, 0.6250, 1.00, 1.00,
	0.9375, 0.6875, 0.00, 0.00,	// For character 175
	1.0000, 0.6875, 1.00, 0.00,
	0.9375, 0.6250, 0.00, 1.00,
	1.0000, 0.6250, 1.00, 1.00,
	0.0000, 0.7500, 0.00, 0.00,	// For character 176
	0.0625, 0.7500, 1.00, 0.00,
	0.0000, 0.6875, 0.00, 1.00,
	0.0625, 0.6875, 1.00, 1.00,
	0.0625, 0.7500, 0.00, 0.00,	// For character 177
	0.1250, 0.7500, 1.00, 0.00,
	0.0625, 0.6875, 0.00, 1.00,
	0.1250, 0.6875, 1.00, 1.00,
	0.1250, 0.7500, 0.00, 0.00,	// For character 178
	0.1875, 0.7500, 1.00, 0.00,
	0.1250, 0.6875, 0.00, 1.00,
	0.1875, 0.6875, 1.00, 1.00,
	0.1875, 0.7500, 0.00, 0.00,	// For character 179
	0.2500, 0.7500, 1.00, 0.00,
	0.1875, 0.6875, 0.00, 1.00,
	0.2500, 0.6875, 1.00, 1.00,
	0.2500, 0.7500, 0.00, 0.00,	// For character 180
	0.3125, 0.7500, 1.00, 0.00,
	0.2500, 0.6875, 0.00, 1.00,
	0.3125, 0.6875, 1.00, 1.00,
	0.3125, 0.7500, 0.00, 0.00,	// For character 181
	0.3750, 0.7500, 1.00, 0.00,
	0.3125, 0.6875, 0.00, 1.00,
	0.3750, 0.6875, 1.00, 1.00,
	0.3750, 0.7500, 0.00, 0.00,	// For character 182
	0.4375, 0.7500, 1.00, 0.00,
	0.3750, 0.6875, 0.00, 1.00,
	0.4375, 0.6875, 1.00, 1.00,
	0.4375, 0.7500, 0.00, 0.00,	// For character 183
	0.5000, 0.7500, 1.00, 0.00,
	0.4375, 0.6875, 0.00, 1.00,
	0.5000, 0.6875, 1.00, 1.00,
	0.5000, 0.7500, 0.00, 0.00,	// For character 184
	0.5625, 0.7500, 1.00, 0.00,
	0.5000, 0.6875, 0.00, 1.00,
	0.5625, 0.6875, 1.00, 1.00,
	0.5625, 0.7500, 0.00, 0.00,	// For character 185
	0.6250, 0.7500, 1.00, 0.00,
	0.5625, 0.6875, 0.00, 1.00,
	0.6250, 0.6875, 1.00, 1.00,
	0.6250, 0.7500, 0.00, 0.00,	// For character 186
	0.6875, 0.7500, 1.00, 0.00,
	0.6250, 0.6875, 0.00, 1.00,
	0.6875, 0.6875, 1.00, 1.00,
	0.6875, 0.7500, 0.00, 0.00,	// For character 187
	0.7500, 0.7500, 1.00, 0.00,
	0.6875, 0.6875, 0.00, 1.00,
	0.7500, 0.6875, 1.00, 1.00,
	0.7500, 0.7500, 0.00, 0.00,	// For character 188
	0.8125, 0.7500, 1.00, 0.00,
	0.7500, 0.6875, 0.00, 1.00,
	0.8125, 0.6875, 1.00, 1.00,
	0.8125, 0.7500, 0.00, 0.00,	// For character 189
	0.8750, 0.7500, 1.00, 0.00,
	0.8125, 0.6875, 0.00, 1.00,
	0.8750, 0.6875, 1.00, 1.00,
	0.8750, 0.7500, 0.00, 0.00,	// For character 190
	0.9375, 0.7500, 1.00, 0.00,
	0.8750, 0.6875, 0.00, 1.00,
	0.9375, 0.6875, 1.00, 1.00,
	0.9375, 0.7500, 0.00, 0.00,	// For character 191
	1.0000, 0.7500, 1.00, 0.00,
	0.9375, 0.6875, 0.00, 1.00,
	1.0000, 0.6875, 1.00, 1.00,
	0.0000, 0.8125, 0.00, 0.00,	// For character 192
	0.0625, 0.8125, 1.00, 0.00,
	0.0000, 0.7500, 0.00, 1.00,
	0.0625, 0.7500, 1.00, 1.00,
	0.0625, 0.8125, 0.00, 0.00,	// For character 193
	0.1250, 0.8125, 1.00, 0.00,
	0.0625, 0.7500, 0.00, 1.00,
	0.1250, 0.7500, 1.00, 1.00,
	0.1250, 0.8125, 0.00, 0.00,	// For character 194
	0.1875, 0.8125, 1.00, 0.00,
	0.1250, 0.7500, 0.00, 1.00,
	0.1875, 0.7500, 1.00, 1.00,
	0.1875, 0.8125, 0.00, 0.00,	// For character 195
	0.2500, 0.8125, 1.00, 0.00,
	0.1875, 0.7500, 0.00, 1.00,
	0.2500, 0.7500, 1.00, 1.00,
	0.2500, 0.8125, 0.00, 0.00,	// For character 196
	0.3125, 0.8125, 1.00, 0.00,
	0.2500, 0.7500, 0.00, 1.00,
	0.3125, 0.7500, 1.00, 1.00,
	0.3125, 0.8125, 0.00, 0.00,	// For character 197
	0.3750, 0.8125, 1.00, 0.00,
	0.3125, 0.7500, 0.00, 1.00,
	0.3750, 0.7500, 1.00, 1.00,
	0.3750, 0.8125, 0.00, 0.00,	// For character 198
	0.4375, 0.8125, 1.00, 0.00,
	0.3750, 0.7500, 0.00, 1.00,
	0.4375, 0.7500, 1.00, 1.00,
	0.4375, 0.8125, 0.00, 0.00,	// For character 199
	0.5000, 0.8125, 1.00, 0.00,
	0.4375, 0.7500, 0.00, 1.00,
	0.5000, 0.7500, 1.00, 1.00,
	0.5000, 0.8125, 0.00, 0.00,	// For character 200
	0.5625, 0.8125, 1.00, 0.00,
	0.5000, 0.7500, 0.00, 1.00,
	0.5625, 0.7500, 1.00, 1.00,
	0.5625, 0.8125, 0.00, 0.00,	// For character 201
	0.6250, 0.8125, 1.00, 0.00,
	0.5625, 0.7500, 0.00, 1.00,
	0.6250, 0.7500, 1.00, 1.00,
	0.6250, 0.8125, 0.00, 0.00,	// For character 202
	0.6875, 0.8125, 1.00, 0.00,
	0.6250, 0.7500, 0.00, 1.00,
	0.6875, 0.7500, 1.00, 1.00,
	0.6875, 0.8125, 0.00, 0.00,	// For character 203
	0.7500, 0.8125, 1.00, 0.00,
	0.6875, 0.7500, 0.00, 1.00,
	0.7500, 0.7500, 1.00, 1.00,
	0.7500, 0.8125, 0.00, 0.00,	// For character 204
	0.8125, 0.8125, 1.00, 0.00,
	0.7500, 0.7500, 0.00, 1.00,
	0.8125, 0.7500, 1.00, 1.00,
	0.8125, 0.8125, 0.00, 0.00,	// For character 205
	0.8750, 0.8125, 1.00, 0.00,
	0.8125, 0.7500, 0.00, 1.00,
	0.8750, 0.7500, 1.00, 1.00,
	0.8750, 0.8125, 0.00, 0.00,	// For character 206
	0.9375, 0.8125, 1.00, 0.00,
	0.8750, 0.7500, 0.00, 1.00,
	0.9375, 0.7500, 1.00, 1.00,
	0.9375, 0.8125, 0.00, 0.00,	// For character 207
	1.0000, 0.8125, 1.00, 0.00,
	0.9375, 0.7500, 0.00, 1.00,
	1.0000, 0.7500, 1.00, 1.00,
	0.0000, 0.8750, 0.00, 0.00,	// For character 208
	0.0625, 0.8750, 1.00, 0.00,
	0.0000, 0.8125, 0.00, 1.00,
	0.0625, 0.8125, 1.00, 1.00,
	0.0625, 0.8750, 0.00, 0.00,	// For character 209
	0.1250, 0.8750, 1.00, 0.00,
	0.0625, 0.8125, 0.00, 1.00,
	0.1250, 0.8125, 1.00, 1.00,
	0.1250, 0.8750, 0.00, 0.00,	// For character 210
	0.1875, 0.8750, 1.00, 0.00,
	0.1250, 0.8125, 0.00, 1.00,
	0.1875, 0.8125, 1.00, 1.00,
	0.1875, 0.8750, 0.00, 0.00,	// For character 211
	0.2500, 0.8750, 1.00, 0.00,
	0.1875, 0.8125, 0.00, 1.00,
	0.2500, 0.8125, 1.00, 1.00,
	0.2500, 0.8750, 0.00, 0.00,	// For character 212
	0.3125, 0.8750, 1.00, 0.00,
	0.2500, 0.8125, 0.00, 1.00,
	0.3125, 0.8125, 1.00, 1.00,
	0.3125, 0.8750, 0.00, 0.00,	// For character 213
	0.3750, 0.8750, 1.00, 0.00,
	0.3125, 0.8125, 0.00, 1.00,
	0.3750, 0.8125, 1.00, 1.00,
	0.3750, 0.8750, 0.00, 0.00,	// For character 214
	0.4375, 0.8750, 1.00, 0.00,
	0.3750, 0.8125, 0.00, 1.00,
	0.4375, 0.8125, 1.00, 1.00,
	0.4375, 0.8750, 0.00, 0.00,	// For character 215
	0.5000, 0.8750, 1.00, 0.00,
	0.4375, 0.8125, 0.00, 1.00,
	0.5000, 0.8125, 1.00, 1.00,
	0.5000, 0.8750, 0.00, 0.00,	// For character 216
	0.5625, 0.8750, 1.00, 0.00,
	0.5000, 0.8125, 0.00, 1.00,
	0.5625, 0.8125, 1.00, 1.00,
	0.5625, 0.8750, 0.00, 0.00,	// For character 217
	0.6250, 0.8750, 1.00, 0.00,
	0.5625, 0.8125, 0.00, 1.00,
	0.6250, 0.8125, 1.00, 1.00,
	0.6250, 0.8750, 0.00, 0.00,	// For character 218
	0.6875, 0.8750, 1.00, 0.00,
	0.6250, 0.8125, 0.00, 1.00,
	0.6875, 0.8125, 1.00, 1.00,
	0.6875, 0.8750, 0.00, 0.00,	// For character 219
	0.7500, 0.8750, 1.00, 0.00,
	0.6875, 0.8125, 0.00, 1.00,
	0.7500, 0.8125, 1.00, 1.00,
	0.7500, 0.8750, 0.00, 0.00,	// For character 220
	0.8125, 0.8750, 1.00, 0.00,
	0.7500, 0.8125, 0.00, 1.00,
	0.8125, 0.8125, 1.00, 1.00,
	0.8125, 0.8750, 0.00, 0.00,	// For character 221
	0.8750, 0.8750, 1.00, 0.00,
	0.8125, 0.8125, 0.00, 1.00,
	0.8750, 0.8125, 1.00, 1.00,
	0.8750, 0.8750, 0.00, 0.00,	// For character 222
	0.9375, 0.8750, 1.00, 0.00,
	0.8750, 0.8125, 0.00, 1.00,
	0.9375, 0.8125, 1.00, 1.00,
	0.9375, 0.8750, 0.00, 0.00,	// For character 223
	1.0000, 0.8750, 1.00, 0.00,
	0.9375, 0.8125, 0.00, 1.00,
	1.0000, 0.8125, 1.00, 1.00,
	0.0000, 0.9375, 0.00, 0.00,	// For character 224
	0.0625, 0.9375, 1.00, 0.00,
	0.0000, 0.8750, 0.00, 1.00,
	0.0625, 0.8750, 1.00, 1.00,
	0.0625, 0.9375, 0.00, 0.00,	// For character 225
	0.1250, 0.9375, 1.00, 0.00,
	0.0625, 0.8750, 0.00, 1.00,
	0.1250, 0.8750, 1.00, 1.00,
	0.1250, 0.9375, 0.00, 0.00,	// For character 226
	0.1875, 0.9375, 1.00, 0.00,
	0.1250, 0.8750, 0.00, 1.00,
	0.1875, 0.8750, 1.00, 1.00,
	0.1875, 0.9375, 0.00, 0.00,	// For character 227
	0.2500, 0.9375, 1.00, 0.00,
	0.1875, 0.8750, 0.00, 1.00,
	0.2500, 0.8750, 1.00, 1.00,
	0.2500, 0.9375, 0.00, 0.00,	// For character 228
	0.3125, 0.9375, 1.00, 0.00,
	0.2500, 0.8750, 0.00, 1.00,
	0.3125, 0.8750, 1.00, 1.00,
	0.3125, 0.9375, 0.00, 0.00,	// For character 229
	0.3750, 0.9375, 1.00, 0.00,
	0.3125, 0.8750, 0.00, 1.00,
	0.3750, 0.8750, 1.00, 1.00,
	0.3750, 0.9375, 0.00, 0.00,	// For character 230
	0.4375, 0.9375, 1.00, 0.00,
	0.3750, 0.8750, 0.00, 1.00,
	0.4375, 0.8750, 1.00, 1.00,
	0.4375, 0.9375, 0.00, 0.00,	// For character 231
	0.5000, 0.9375, 1.00, 0.00,
	0.4375, 0.8750, 0.00, 1.00,
	0.5000, 0.8750, 1.00, 1.00,
	0.5000, 0.9375, 0.00, 0.00,	// For character 232
	0.5625, 0.9375, 1.00, 0.00,
	0.5000, 0.8750, 0.00, 1.00,
	0.5625, 0.8750, 1.00, 1.00,
	0.5625, 0.9375, 0.00, 0.00,	// For character 233
	0.6250, 0.9375, 1.00, 0.00,
	0.5625, 0.8750, 0.00, 1.00,
	0.6250, 0.8750, 1.00, 1.00,
	0.6250, 0.9375, 0.00, 0.00,	// For character 234
	0.6875, 0.9375, 1.00, 0.00,
	0.6250, 0.8750, 0.00, 1.00,
	0.6875, 0.8750, 1.00, 1.00,
	0.6875, 0.9375, 0.00, 0.00,	// For character 235
	0.7500, 0.9375, 1.00, 0.00,
	0.6875, 0.8750, 0.00, 1.00,
	0.7500, 0.8750, 1.00, 1.00,
	0.7500, 0.9375, 0.00, 0.00,	// For character 236
	0.8125, 0.9375, 1.00, 0.00,
	0.7500, 0.8750, 0.00, 1.00,
	0.8125, 0.8750, 1.00, 1.00,
	0.8125, 0.9375, 0.00, 0.00,	// For character 237
	0.8750, 0.9375, 1.00, 0.00,
	0.8125, 0.8750, 0.00, 1.00,
	0.8750, 0.8750, 1.00, 1.00,
	0.8750, 0.9375, 0.00, 0.00,	// For character 238
	0.9375, 0.9375, 1.00, 0.00,
	0.8750, 0.8750, 0.00, 1.00,
	0.9375, 0.8750, 1.00, 1.00,
	0.9375, 0.9375, 0.00, 0.00,	// For character 239
	1.0000, 0.9375, 1.00, 0.00,
	0.9375, 0.8750, 0.00, 1.00,
	1.0000, 0.8750, 1.00, 1.00,
	0.0000, 1.0000, 0.00, 0.00,	// For character 240
	0.0625, 1.0000, 1.00, 0.00,
	0.0000, 0.9375, 0.00, 1.00,
	0.0625, 0.9375, 1.00, 1.00,
	0.0625, 1.0000, 0.00, 0.00,	// For character 241
	0.1250, 1.0000, 1.00, 0.00,
	0.0625, 0.9375, 0.00, 1.00,
	0.1250, 0.9375, 1.00, 1.00,
	0.1250, 1.0000, 0.00, 0.00,	// For character 242
	0.1875, 1.0000, 1.00, 0.00,
	0.1250, 0.9375, 0.00, 1.00,
	0.1875, 0.9375, 1.00, 1.00,
	0.1875, 1.0000, 0.00, 0.00,	// For character 243
	0.2500, 1.0000, 1.00, 0.00,
	0.1875, 0.9375, 0.00, 1.00,
	0.2500, 0.9375, 1.00, 1.00,
	0.2500, 1.0000, 0.00, 0.00,	// For character 244
	0.3125, 1.0000, 1.00, 0.00,
	0.2500, 0.9375, 0.00, 1.00,
	0.3125, 0.9375, 1.00, 1.00,
	0.3125, 1.0000, 0.00, 0.00,	// For character 245
	0.3750, 1.0000, 1.00, 0.00,
	0.3125, 0.9375, 0.00, 1.00,
	0.3750, 0.9375, 1.00, 1.00,
	0.3750, 1.0000, 0.00, 0.00,	// For character 246
	0.4375, 1.0000, 1.00, 0.00,
	0.3750, 0.9375, 0.00, 1.00,
	0.4375, 0.9375, 1.00, 1.00,
	0.4375, 1.0000, 0.00, 0.00,	// For character 247
	0.5000, 1.0000, 1.00, 0.00,
	0.4375, 0.9375, 0.00, 1.00,
	0.5000, 0.9375, 1.00, 1.00,
	0.5000, 1.0000, 0.00, 0.00,	// For character 248
	0.5625, 1.0000, 1.00, 0.00,
	0.5000, 0.9375, 0.00, 1.00,
	0.5625, 0.9375, 1.00, 1.00,
	0.5625, 1.0000, 0.00, 0.00,	// For character 249
	0.6250, 1.0000, 1.00, 0.00,
	0.5625, 0.9375, 0.00, 1.00,
	0.6250, 0.9375, 1.00, 1.00,
	0.6250, 1.0000, 0.00, 0.00,	// For character 250
	0.6875, 1.0000, 1.00, 0.00,
	0.6250, 0.9375, 0.00, 1.00,
	0.6875, 0.9375, 1.00, 1.00,
	0.6875, 1.0000, 0.00, 0.00,	// For character 251
	0.7500, 1.0000, 1.00, 0.00,
	0.6875, 0.9375, 0.00, 1.00,
	0.7500, 0.9375, 1.00, 1.00,
	0.7500, 1.0000, 0.00, 0.00,	// For character 252
	0.8125, 1.0000, 1.00, 0.00,
	0.7500, 0.9375, 0.00, 1.00,
	0.8125, 0.9375, 1.00, 1.00,
	0.8125, 1.0000, 0.00, 0.00,	// For character 253
	0.8750, 1.0000, 1.00, 0.00,
	0.8125, 0.9375, 0.00, 1.00,
	0.8750, 0.9375, 1.00, 1.00,
	0.8750, 1.0000, 0.00, 0.00,	// For character 254
	0.9375, 1.0000, 1.00, 0.00,
	0.8750, 0.9375, 0.00, 1.00,
	0.9375, 0.9375, 1.00, 1.00,
	0.9375, 1.0000, 0.00, 0.00,	// For character 255
	1.0000, 1.0000, 1.00, 0.00,
	0.9375, 0.9375, 0.00, 1.00,
	1.0000, 0.9375, 1.00, 1.00,
};



bool iglu_TextRoutines   = false;
IGLUShaderProgram::Ptr drawText                = 0; 
IGLUShaderProgram::Ptr drawVariableWidthText   = 0; 
IGLUVertexArray::Ptr   textGeom                = 0;
IGLUTexture2D::Ptr     fontTex                 = 0;
IGLUTextureBuffer::Ptr charOffsets             = 0;
IGLUBuffer::Ptr        bufCharOffsets          = 0;

unsigned short charIndices[6*MAX_STRING_SIZE];
float          varWidthOffsets[4*MAX_STRING_SIZE];

int charPixWidth  = 0;
int charPixHeight = 0;

static bool InitializeTextRoutines( void )
{
	// Make sure GLEW has been initialized
	if (!glGetAttribLocation)
		return false;

	// Create a texture buffer to store per-character information for variable-width font drawing
	bufCharOffsets = new IGLUBuffer();
	bufCharOffsets->SetBufferData( 4 * sizeof( float ) * MAX_STRING_SIZE, NULL, IGLU_STATIC|IGLU_DRAW );
	charOffsets = new IGLUTextureBuffer();
	charOffsets->BindBuffer( GL_RGBA32F, bufCharOffsets );

	// Load our font texture.  We assume it's a grid of 16x16 characters!
	fontTex = new IGLUTexture2D( iglu_BitmapFont1, 1024, 1024, false, IGLU_MAG_LINEAR | IGLU_MIN_LINEAR | IGLU_CLAMP_TO_EDGE_S | IGLU_CLAMP_TO_EDGE_T );
	charPixWidth  = fontTex->GetWidth() / 16;
	charPixHeight = fontTex->GetHeight() / 16;

	// Create our text drawing shaders.  This one is for a fixed-width font.
	drawText = new IGLUShaderProgram();
	drawText->CreateFromString( iglu_TextVS, iglu_TextGS, iglu_TextFS );
	drawText->SetProgramEnables( IGLU_GLSL_BLEND );
	drawText->SetProgramDisables( IGLU_GLSL_DEPTH_TEST );
	drawText["fontTex"] = fontTex;

	// Create our text drawing shaders.  This one is for a variable-width font.
	drawVariableWidthText = new IGLUShaderProgram();
	drawVariableWidthText->CreateFromString( iglu_TextVS, iglu_TextVariableGS, iglu_TextFS );
	drawVariableWidthText->SetProgramEnables( IGLU_GLSL_BLEND );
	drawVariableWidthText->SetProgramDisables( IGLU_GLSL_DEPTH_TEST );
	drawVariableWidthText["fontTex"] = fontTex;
	drawVariableWidthText["perCharData"] = charOffsets;

	// Create a vertex array storing our full-screen quad
	textGeom = new IGLUVertexArray();
	textGeom->SetElementArray( GL_UNSIGNED_SHORT, sizeof(charIndices), charIndices );
	textGeom->SetVertexArray( sizeof(iglu_CharQuadData), iglu_CharQuadData, iglu::IGLU_STATIC | iglu::IGLU_DRAW );
	textGeom->EnableAttribute( drawText["vertex"], 2, GL_FLOAT, 4*sizeof(float), BUFFER_OFFSET( 2 * sizeof(float) ) );
	textGeom->EnableAttribute( drawText["texCoord"], 2, GL_FLOAT, 4*sizeof(float), BUFFER_OFFSET( 0 ) );
	textGeom->EnablePrimitiveRestart( 65535 );

	iglu_TextRoutines = true;
	return true;
}


int DrawFixedWidthText( int x_left, int y_bottom, const vec4 &color, const char *text, float scaleFactor, int targetViewport )
{
	// Make sure we have a valid string to draw!
	if (!text)
		return IGLU_ERROR_INVALID_PARAMETERS;

	// Find the length of the string
	int textLen = strlen(text);
	textLen = textLen > MAX_STRING_SIZE ? MAX_STRING_SIZE : textLen; // Limit to MAX_STRING_SIZE characters per call.

	// If the string is empty just return now.
	if (textLen <= 0)
		return IGLU_NO_ERROR;

	// Check if the OpenGL state for drawing text has been initialized...
	if (!iglu_TextRoutines)
		if (!InitializeTextRoutines())
			return IGLU_ERROR_INITIALIZING_DRAW_ROUTINES;

	// Get the current viewport
	float curViewport[4];
	glGetFloati_v( GL_VIEWPORT, targetViewport, curViewport );

	// Find the lower left corner of the drawing region in normalized-device coordinate (i.e., [-1..1])
	vec2 lowerLeft = vec2( x_left-curViewport[0], y_bottom-curViewport[1] ) *
		             vec2( 2.0f/curViewport[2], 2.0f/curViewport[3] ) + vec2( -1, -1 );

	// Set the color
	drawText["textColor"] = color;

#define CHAR_SPACING -30

	// Set parameters of the character size so we can offset by an appropriate amount in the shader.
	drawText["lowerLeft"] = lowerLeft;
	drawText["charDelta"] = vec2( scaleFactor*charPixWidth / curViewport[2], scaleFactor*charPixHeight / curViewport[3] );
	drawText["charSpacing"] = vec2( scaleFactor*(charPixWidth+CHAR_SPACING) / curViewport[2], scaleFactor*charPixHeight / curViewport[3] );

	// Make a list of the vertex locations (in iglu_CharQuadData) for the characters we need
	for (int i=0; i<textLen; i++)
	{
		int charID = text[i] < 0 ? text[i]+256 : text[i];
		charIndices[5*i+0] = (unsigned short)(4*charID+0);
		charIndices[5*i+1] = (unsigned short)(4*charID+1);
		charIndices[5*i+2] = (unsigned short)(4*charID+2);
		charIndices[5*i+3] = (unsigned short)(4*charID+3);
		charIndices[5*i+4] = 65535;
	}
	textGeom->SetElementArraySubset( 0, 5 * textLen * sizeof( unsigned short ), charIndices );
	

	// Draw our text as one quad/tri-strip per character using an instanced draw arrays.
	glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );
	drawText->Enable();
		textGeom->DrawElements( GL_TRIANGLE_STRIP, 5 * textLen );
	drawText->Disable();

	return IGLU_NO_ERROR;

#undef CHAR_SPACING 
}


int DrawVariableWidthText( int x_left, int y_bottom, const vec4 &color, const char *text, float scaleFactor, int targetViewport )
{
	// Make sure we have a valid string to draw!
	if (!text)
		return IGLU_ERROR_INVALID_PARAMETERS;

	// Find the length of the string
	int textLen = strlen(text);
	textLen = textLen > MAX_STRING_SIZE ? MAX_STRING_SIZE : textLen; // Limit to MAX_STRING_SIZE characters per call.

	// If the string is empty just return now.
	if (textLen <= 0)
		return IGLU_NO_ERROR;

	// Check if the OpenGL state for drawing text has been initialized...
	if (!iglu_TextRoutines)
		if (!InitializeTextRoutines())
			return IGLU_ERROR_INITIALIZING_DRAW_ROUTINES;

	// Get the current viewport
	float curViewport[4];
	glGetFloati_v( GL_VIEWPORT, targetViewport, curViewport );

	// Find the lower left corner of the drawing region in normalized-device coordinate (i.e., [-1..1])
	vec2 lowerLeft = vec2( x_left-curViewport[0], y_bottom-curViewport[1] ) *
		             vec2( 2.0f/curViewport[2], 2.0f/curViewport[3] ) + vec2( -1, -1 );

	// Set the color
	drawVariableWidthText["textColor"] = color;

// Apparently, extra space creeps between all letter.  Dunno how.  
//    This corrects for it by adding an empirically determined offset
//    to each character's length
#define CHAR_SPACING -8

	// Set parameters of the character size so we can offset by an appropriate amount in the shader.
	drawVariableWidthText["lowerLeft"] = lowerLeft;
	drawVariableWidthText["charDelta"] = vec2( scaleFactor*charPixWidth / curViewport[2], scaleFactor*charPixHeight / curViewport[3] );

	// Make a list of the vertex locations (in iglu_CharQuadData) for the characters we need
	for (int i=0,curPixOffset=0; i<textLen; i++)
	{
		// Given the signed-ness of our input, convert back to [0..255]
		int charID = text[i] < 0 ? text[i]+256 : text[i];

		// Find the indicies for this character's quad in the texture tile array (for vertex shader)
		charIndices[5*i+0] = (unsigned short)(4*charID+0);
		charIndices[5*i+1] = (unsigned short)(4*charID+1);
		charIndices[5*i+2] = (unsigned short)(4*charID+2);
		charIndices[5*i+3] = (unsigned short)(4*charID+3);
		charIndices[5*i+4] = 65535;

		// Find the parameters needed for the geometry shader to reshape the character to an appropriate size
		int curPixWidth = int(iglu_BitmapFont1Offsets[2*charID+1]);
		varWidthOffsets[4*i+0] = float( curPixWidth ) / fontTex->GetWidth();  // Current letter width in texture space
		varWidthOffsets[4*i+1] = float( curPixWidth ) / charPixWidth;         // Current letter width as percentage of fixed-width letter
		varWidthOffsets[4*i+2] = float( curPixOffset ) / charPixWidth;        // Current offest from start of text, as a percentage of a fixed-width letter
		varWidthOffsets[4*i+3] = float( iglu_BitmapFont1Offsets[2*charID] ) / fontTex->GetWidth();  // u-tex coord for left side of letter
		curPixOffset += curPixWidth+CHAR_SPACING;
	}

	// We just updated the data in 2 important GPU arrays.  Tell the GPU about the new data.
	bufCharOffsets->SetBufferSubData( 0, 4 * textLen * sizeof( float ), varWidthOffsets );
	textGeom->SetElementArraySubset( 0, 5 * textLen * sizeof( unsigned short ), charIndices );
	
	// Draw our text as one quad/tri-strip per character using an instanced draw arrays.
	glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );
	drawVariableWidthText->Enable();
		textGeom->DrawElements( GL_TRIANGLE_STRIP, 5 * textLen );
	drawVariableWidthText->Disable();

	return IGLU_NO_ERROR;

#undef CHAR_SPACING 
}



} // End anonymous namespace for globals inside this file...

int iglu::IGLUDraw::DrawText( int igluFont, int x_left, int y_bottom, const char *text, float scaleFactor, int targetViewport )
{
	switch( igluFont ) 
	{
	case IGLU_FONT_FIXED:
		return DrawFixedWidthText( x_left, y_bottom, vec4(1.0f, 1.0f, 1.0f, 1.0f), text, scaleFactor, targetViewport );
	case IGLU_FONT_VARIABLE:
		return DrawVariableWidthText( x_left, y_bottom, vec4(1.0f, 1.0f, 1.0f, 1.0f), text, scaleFactor, targetViewport );
	}

	return IGLU_ERROR_UNKNOWN_FONT;
}

int iglu::IGLUDraw::DrawColorText( int igluFont, int x_left, int y_bottom, 
								   const vec4 &color, const char *text, float scaleFactor, int targetViewport )
{
	switch( igluFont ) 
	{
	case IGLU_FONT_FIXED:
		return DrawFixedWidthText( x_left, y_bottom, color, text, scaleFactor, targetViewport );
	case IGLU_FONT_VARIABLE:
		return DrawVariableWidthText( x_left, y_bottom, color, text, scaleFactor, targetViewport );
	}

	return IGLU_ERROR_UNKNOWN_FONT;
}
