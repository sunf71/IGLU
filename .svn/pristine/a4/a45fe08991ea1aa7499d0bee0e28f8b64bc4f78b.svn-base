/******************************************************************/
/* igluFramebuffer.h                                              */
/* -----------------------                                        */
/*                                                                */
/* The file defines a class that encapsulates framebuffer objects */
/*    for rendering into texture or multiple textures.            */
/*                                                                */
/* Chris Wyman (10/11/2011)                                       */
/******************************************************************/

#ifndef IGLU__FRAMEBUFFER_H
#define IGLU__FRAMEBUFFER_H

#pragma warning( disable: 4996 )

#include <stdio.h>
#include <stdlib.h>
#include <GL/glew.h>
#include <GL/glut.h>
#include "igluRenderTexture.h"

namespace iglu {

class IGLUFramebuffer 
{
public:
	IGLUFramebuffer();
    virtual ~IGLUFramebuffer();

	// Bind/unbind this framebuffer.  When bound, this is the buffer being drawn to. 
	virtual void Bind( bool storePrevBinding=false );
	virtual void Unbind( void );

	// Control which internal buffer(s) are drawn into when drawing
	//virtual void SetDrawBuffer( int colorBuf );
	//virtual void SetDrawBuffers( int numBufs, int *colorBufs );

	// Clears the framebuffer
	virtual void Clear( void );

	// Checks if drawing to this framebuffer works.  Is false if some step during creation fails
	inline bool IsDrawable( void ) const	        { return m_isRenderable; }

	// Returns an internal renderable texture.
	IGLURenderTexture &operator[]   ( int buffer );
	IGLURenderTexture *GetAttachment( int buffer );

	// Attach a renderable texture to this buffer
	bool AttachTexture( int buffer, IGLURenderTexture *tex );

	// A pointer to a IGLUFramebuffer could have type IGLUFramebuffer::Ptr
	typedef IGLUPtr<IGLUFramebuffer,IGLURenderTexture&,IGLURenderTexture&> Ptr;

	//Resize attachments of this framebuffer
	void Resize(int width, int height);

	////////////////////////////////////////////////////////////////////////////////////
	// Static helper methods for constructing more complex IGLUFramebuffers 
	//

	// Create a single color-plane with a specified internal format, and (optionally) a depth plane 
	//    and/or stencil plane.  If both depth & stencil are enabled, it creates a depth-stencil texture.
	static IGLUFramebuffer::Ptr Create( GLenum internalFormat, int width, int height, bool hasDepth=false, bool hasStencil=false );

	// Create a single color-plane with multisampling and aspecified internal format, and (optionally) a 
	//    depth and/or stencil plane.  If both depth & stencil are enabled, it creates a depth-stencil texture.
	static IGLUFramebuffer::Ptr CreateMultisample( GLenum internalFormat, int width, int height, 
		                                           int numSamples, bool hasDepth=false, bool hasStencil=false );

protected:
	GLuint m_clearBits;
	bool   m_isBound;
	bool   m_isRenderable;
	GLuint m_fboID;
	int    m_maxColorBufs;
	GLuint m_fboTextureType;
	GLint  m_prevBinding;
	int    m_width, m_height;
	float  m_prevViewport[4];

	IGLUArray1D<IGLURenderTexture *> m_colorBufs;
	IGLUArray1D<IGLURenderTexture *> m_depthBufs;   // Currently, should be exactly 0 or 1
	IGLUArray1D<IGLURenderTexture *> m_stencilBufs; // Currently, should be exactly 0 or 1

	// Some internal utility/helper functions
	bool CheckTextureType( GLuint texType );
	void ErrorTextureTypeMismatch( GLuint inputType );
};

enum {
	IGLU_COLOR         =  0,
	IGLU_COLOR0        =  0,
	IGLU_COLOR1        =  1,
	IGLU_COLOR2        =  2,
	IGLU_COLOR3        =  3,
	IGLU_COLOR4        =  4,
	IGLU_COLOR5        =  5,
	IGLU_COLOR6        =  6,
	IGLU_COLOR7        =  7,
	IGLU_COLOR_MAX     =  8,
	IGLU_DEPTH         = 50,
	IGLU_STENCIL       = 60,
	IGLU_DEPTH_STENCIL = 70
};

// End namespace iglu
}


#endif